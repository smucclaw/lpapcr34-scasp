
@article{landin_next_1966,
	title = {The next 700 programming languages},
	volume = {9},
	issn = {0001-0782},
	url = {https://doi.org/10.1145/365230.365257},
	doi = {10.1145/365230.365257},
	abstract = {A family of unimplemented computing languages is described that is intended to span differences of application area by a unified framework. This framework dictates the rules about the uses of user-coined names, and the conventions about characterizing functional relationships. Within this framework the design of a specific language splits into two independent parts. One is the choice of written appearances of programs (or more generally, their physical representation). The other is the choice of the abstract entities (such as numbers, character-strings, list of them, functional relations among them) that can be referred to in the language. The system is biased towards “expressions” rather than “statements.” It includes a nonprocedural (purely functional) subsystem that aims to expand the class of users' needs that can be met by a single print-instruction, without sacrificing the important properties that make conventional right-hand-side expressions easy to construct and understand.},
	number = {3},
	urldate = {2020-09-19},
	journal = {Communications of the ACM},
	author = {Landin, P. J.},
	month = mar,
	year = {1966},
	keywords = {jurix2020},
	pages = {157--166}
}

@article{ranta_grammatical_2004,
	title = {Grammatical {Framework}},
	volume = {14},
	number = {2},
	journal = {Journal of Functional Programming},
	author = {Ranta, Aarne},
	year = {2004},
	note = {Publisher: Cambridge University Press},
	pages = {145--189}
}

@inproceedings{angelov_implementing_2009,
	title = {Implementing controlled languages in {GF}},
	booktitle = {Proceedings of the {International} {Workshop} on {Controlled} {Natural} {Language}},
	publisher = {Springer},
	author = {Angelov, Krasimir and Ranta, Aarne},
	year = {2009},
	pages = {82--101}
}

@inproceedings{fuchs_attempto_1996,
	title = {Attempto {Controlled} {English} ({ACE})},
	booktitle = {Proceedings of the {First} {International} {Workshop} on {Controlled} {Language} {Applications}},
	author = {Fuchs, Norbert E. and Schwitter, Rolf},
	year = {1996}
}

@inproceedings{bench-capon_isomorphism_2009,
	title = {Isomorphism and argumentation},
	booktitle = {Proceedings of the 12th international conference on artificial intelligence and law},
	author = {Bench-Capon, Trevor and Gordon, Thomas F},
	year = {2009},
	pages = {11--20}
}

@inproceedings{sun_pat_2009,
	address = {Berlin, Heidelberg},
	series = {Lecture {Notes} in {Computer} {Science}},
	title = {{PAT}: {Towards} {Flexible} {Verification} under {Fairness}},
	isbn = {978-3-642-02658-4},
	shorttitle = {{PAT}},
	doi = {10.1007/978-3-642-02658-4_59},
	abstract = {Recent development on distributed systems has shown that a variety of fairness constraints (some of which are only recently defined) play vital roles in designing self-stabilizing population protocols. Current practice of system analysis is, however, deficient under fairness. In this work, we present PAT, a toolkit for flexible and efficient system analysis under fairness. A unified algorithm is proposed to model check systems with a variety of fairness effectively in two different settings. Empirical evaluation shows that PAT complements existing model checkers in terms of fairness. We report that previously unknown bugs have been revealed using PAT against systems functioning under strong global fairness.},
	language = {en},
	booktitle = {Computer {Aided} {Verification}},
	publisher = {Springer},
	author = {Sun, Jun and Liu, Yang and Dong, Jin Song and Pang, Jun},
	editor = {Bouajjani, Ahmed and Maler, Oded},
	year = {2009},
	keywords = {Label Transition System, Linear Temporal Logic, Model Check, Model Check Algorithm, Population Protocol},
	pages = {709--714},
	file = {Springer Full Text PDF:/Users/mengwong/Zotero/storage/Z4WQXMC7/Sun et al. - 2009 - PAT Towards Flexible Verification under Fairness.pdf:application/pdf}
}

@inproceedings{larsen_uppaal_1997,
	series = {{LNCS}},
	title = {Uppaal: {Status} and {Developments}},
	booktitle = {{CAV97}},
	publisher = {Springer–Verlag},
	author = {Larsen, Kim G. and Pettersson, Paul and Yi, Wang},
	editor = {Grumberg, Orna},
	month = jun,
	year = {1997},
	note = {Issue: 1254},
	pages = {456--459}
}

@inproceedings{andersen_domain-specific_2014,
	address = {Berlin, Heidelberg},
	series = {Lecture {Notes} in {Computer} {Science}},
	title = {Domain-{Specific} {Languages} for {Enterprise} {Systems}},
	isbn = {978-3-662-45234-9},
	doi = {10.1007/978-3-662-45234-9_6},
	abstract = {The process-oriented event-driven transaction systems (POETS) architecture introduced by Henglein et al. is a novel software architecture for enterprise resource planning (ERP) systems. POETS employs a pragmatic separation between (i) transactional data, that is, what has happened; (ii) reports, that is, what can be derived from the transactional data; and (iii) contracts, that is, which transactions are expected in the future.Moreover, POETS applies domain-specific languages (DSLs) for specifying reports and contracts, in order to enable succinct declarative specifications as well as rapid adaptability and customisation. In this paper we present an implementation of a generalised and extended variant of the POETS architecture. The extensions amount to a customisable data model based on nominal subtyping; support for run-time changes to the data model, reports and contracts, while retaining full auditability; and support for referable data that may evolve over time, also while retaining full auditability as well as referential integrity. Besides the revised architecture, we present the DSLs used to specify data definitions, reports, and contracts respectively. Finally, we illustrate a use case scenario, which we implemented in a trial for a small business.},
	language = {en},
	booktitle = {Leveraging {Applications} of {Formal} {Methods}, {Verification} and {Validation}. {Technologies} for {Mastering} {Change}},
	publisher = {Springer},
	author = {Andersen, Jesper and Bahr, Patrick and Henglein, Fritz and Hvitved, Tom},
	editor = {Margaria, Tiziana and Steffen, Bernhard},
	year = {2014},
	keywords = {Enterprise Resource Planning, Enterprise Resource Planning System, Enterprise System, Record Type, Rule Engine},
	pages = {73--95}
}

@inproceedings{mccarty_language_1989,
	address = {New York, NY, USA},
	series = {{ICAIL} '89},
	title = {A {Language} for {Legal} {Discourse}},
	isbn = {978-0-89791-322-5},
	url = {https://doi.org/10.1145/74014.74037},
	doi = {10.1145/74014.74037},
	urldate = {2020-09-19},
	booktitle = {Proceedings of the 2nd international conference on {Artificial} intelligence and law},
	publisher = {Association for Computing Machinery},
	author = {McCarty, L. T.},
	month = may,
	year = {1989},
	pages = {180--189},
	file = {Submitted Version:/Users/mengwong/Zotero/storage/CPYP3RAS/McCarty - 1989 - A language for legal Discourse I. basic features.pdf:application/pdf}
}

@article{gorin_software_2011,
	title = {A {Software} {Tool} for {Legal} {Drafting}},
	volume = {68},
	issn = {2075-2180},
	url = {http://arxiv.org/abs/1109.2658},
	doi = {10.4204/EPTCS.68.7},
	abstract = {Although many attempts at automated aids for legal drafting have been made, they were based on the construction of a new tool, completely from scratch. This is at least curious, considering that a strong parallelism can be established between a normative document and a software specification: both describe what an entity should or should not do, can or cannot do. In this article we compare normative documents and software specifications to find out their similarities and differences. The comparison shows that there are distinctive particularities, but they are restricted to a very specific subclass of normative propositions. The rest, we postulate, can be dealt with software tools. For such an enterprise the {\textbackslash}FormaLex tool set was devised: an LTL-based language and companion tools that utilize model checking to find out normative incoherences in regulations, contracts and other legal documents. A feature-rich case study is analyzed with the presented tools.},
	urldate = {2020-09-19},
	journal = {Electronic Proceedings in Theoretical Computer Science},
	author = {Gorín, Daniel and Mera, Sergio and Schapachnik, Fernando},
	month = sep,
	year = {2011},
	note = {arXiv: 1109.2658
version: 1},
	keywords = {Computer Science - Computers and Society, Computer Science - Logic in Computer Science, Computer Science - Software Engineering},
	pages = {71--86},
	file = {arXiv Fulltext PDF:/Users/mengwong/Zotero/storage/HL9EKG6Z/Gorín et al. - 2011 - A Software Tool for Legal Drafting.pdf:application/pdf;arXiv.org Snapshot:/Users/mengwong/Zotero/storage/8BFJY59V/1109.html:text/html}
}

@misc{omg_decision_nodate,
	title = {Decision {Model} and {Notation}},
	url = {https://www.omg.org/dmn/},
	urldate = {2020-09-19},
	author = {OMG},
	file = {Decision Model and Notation™ (DMN™) | Object Management Group:/Users/mengwong/Zotero/storage/BXK2U25Y/dmn.html:text/html}
}

@misc{merigoux_catala_nodate,
	title = {Catala},
	url = {https://catala-lang.org/},
	urldate = {2020-09-19},
	author = {Merigoux, Denis},
	file = {Catala:/Users/mengwong/Zotero/storage/RP4RTDKY/catala-lang.org.html:text/html}
}

@phdthesis{camilleri_contracts_2017,
	title = {Contracts and {Computation} — {Formal} modelling and analysis for normative natural language},
	url = {https://gupea.ub.gu.se/handle/2077/53815},
	abstract = {Whether we are aware of it or not, our digital lives are governed by contracts of various kinds, such as privacy policies, software licenses, service agreements, and regulations. At their essence, normative documents like these dictate the permissions, obligations, and prohibitions of two or more parties entering into an agreement, including the penalties which must be paid when someone breaks the rules. Such documents are often lengthy and hard to understand, and most people tend to agree to these legally binding contracts without ever reading them. 
 
Our goal is to create tools which can take a natural language document as input and allow an end user to easily ask questions about its implications, getting back meaningful answers in natural language within a reasonable amount of time. We do this by bringing formal methods to the analysis of normative texts, investigating how they can be effectively modelled and the kinds of automatic processing that these models enable. 
 
This thesis includes six research papers by the author which cover the various aspects of this approach: entity recognition and modality extraction from natural language, controlled natural languages and visual diagrams as interfaces for modelling, logical formalisms which can be used for contract representation, and analysis via syntactic filtering, trace evaluation, random testing, and model checking. These components are then combined into a prototype tool for end users, allowing for end-to-end analysis of normative texts in natural language.},
	language = {eng},
	urldate = {2020-09-19},
	school = {University of Gothenburg},
	author = {Camilleri, John J.},
	month = oct,
	year = {2017},
	note = {Accepted: 2017-10-11T07:51:32Z},
	file = {Snapshot:/Users/mengwong/Zotero/storage/9WADKJU5/53815.html:text/html}
}

@inproceedings{love_computational_2005,
	address = {New York, NY, USA},
	series = {{ICAIL} '05},
	title = {Computational {Law}},
	isbn = {978-1-59593-081-1},
	url = {https://doi.org/10.1145/1165485.1165517},
	doi = {10.1145/1165485.1165517},
	abstract = {Computational law is an approach to automated legal reasoning focusing on semantically rich laws, regulations, contract terms, and business rules in the context of electronically-mediated actions. Current computational tools for electronic commerce fall short of the demands of business, organizations, and individuals conducting complex transactions over the web. However, the growth of semantic data in the world of electronic commerce and online transactions, coupled with grounded rulesets that explicitly reference that data, provides a setting where applying automated reasoning to law can yield fruitful results, reducing inefficiencies, enabling transactions and empowering individuals with knowledge of how laws affect their behavior.},
	urldate = {2020-09-19},
	booktitle = {Proceedings of the 10th international conference on {Artificial} intelligence and law},
	publisher = {Association for Computing Machinery},
	author = {Love, Nathaniel and Genesereth, Michael},
	month = jun,
	year = {2005},
	pages = {205--209}
}

@misc{openfisca_openfisca_nodate,
	title = {{OpenFisca}},
	url = {https://openfisca.org/en/},
	urldate = {2020-09-19},
	author = {OpenFisca},
	file = {OpenFisca - Write rules as code:/Users/mengwong/Zotero/storage/PFDWNN8F/en.html:text/html}
}

@misc{opsi_rules_nodate,
	title = {Rules as {Code}},
	url = {https://oecd-opsi.org/tag/rules-as-code/},
	urldate = {2020-09-19},
	journal = {Rules as Code Archives - Observatory of Public Sector Innovation},
	author = {OPSI, OECD},
	file = {Rules as code Archives - Observatory of Public Sector Innovation Observatory of Public Sector Innovation:/Users/mengwong/Zotero/storage/4H7TZ4H3/rules-as-code.html:text/html}
}

@article{sergot_british_1986,
	title = {The {British} {Nationality} {Act} as a logic program},
	volume = {29},
	issn = {0001-0782},
	url = {https://doi.org/10.1145/5689.5920},
	doi = {10.1145/5689.5920},
	abstract = {The formalization of legislation and the development of computer systems to assist with legal problem solving provide a rich domain for developing and testing artificial-intelligence technology.},
	number = {5},
	urldate = {2020-09-19},
	journal = {Communications of the ACM},
	author = {Sergot, M. J. and Sadri, F. and Kowalski, R. A. and Kriwaczek, F. and Hammond, P. and Cory, H. T.},
	month = may,
	year = {1986},
	pages = {370--386}
}

@misc{red_hat_drools_nodate,
	title = {Drools - {Business} {Rules} {Management} {System}},
	url = {https://www.drools.org/},
	urldate = {2020-09-19},
	author = {RedHat},
	file = {Drools - Business Rules Management System (Java™, Open Source):/Users/mengwong/Zotero/storage/XA4XBGJK/www.drools.org.html:text/html}
}

@inproceedings{athan_legalruleml_2013,
	address = {Berlin, Heidelberg},
	series = {Lecture {Notes} in {Computer} {Science}},
	title = {{LegalRuleML}: {From} {Metamodel} to {Use} {Cases}},
	isbn = {978-3-642-39617-5},
	shorttitle = {{LegalRuleML}},
	doi = {10.1007/978-3-642-39617-5_4},
	abstract = {Several XML-based standards have been proposed for describing rules (RuleML, RIF, SWRL, SBVR, etc.), or specific dialects (RuleML family [1,2]). In 2009, the Legal Knowledge Interchange Format (LKIF [4]) was proposed to extend rule languages to account for the specifics of the legal domain and to manage legal resources. To further develop the representation of the law in XML-based standards, the OASIS Legal- RuleML TC held its first technical meeting on 19 January 2012 [9]. The objective of the TC is to extend the RuleML family with features specific to the formalisation of norms, guidelines, policies, and legal reasoning [3].},
	language = {en},
	booktitle = {Theory, {Practice}, and {Applications} of {Rules} on the {Web}},
	publisher = {Springer},
	author = {Athan, Tara and Boley, Harold and Governatori, Guido and Palmirani, Monica and Paschke, Adrian and Wyner, Adam},
	editor = {Morgenstern, Leora and Stefaneas, Petros and Lévy, François and Wyner, Adam and Paschke, Adrian},
	year = {2013},
	keywords = {Defeasible Logic, Legal Domain, Legal Reasoning, Link Open Data, Technical Meeting},
	pages = {13--18}
}

@article{lam_enabling_2019,
	title = {Enabling reasoning with {LegalRuleML}},
	volume = {19},
	issn = {1471-0684, 1475-3081},
	url = {https://www.cambridge.org/core/journals/theory-and-practice-of-logic-programming/article/enabling-reasoning-with-legalruleml/B595A9381624C7D96B4A27D579966D5E},
	doi = {10.1017/S1471068418000339},
	abstract = {In order to automate verification process, regulatory rules written in natural language need to be translated into a format that machines can understand. However, none of the existing formalisms can fully represent the elements that appear in legal norms. For instance, most of these formalisms do not provide features to capture the behavior of deontic effects, which is an important aspect in automated compliance checking. This paper presents an approach for transforming legal norms represented using legalruleml to a variant of modal defeasible logic (and vice versa) such that a legal statement represented using LegalRuleML can be transformed into a machine-readable format that can be understood and reasoned about depending upon the client's preferences.},
	language = {en},
	number = {1},
	urldate = {2020-09-20},
	journal = {Theory and Practice of Logic Programming},
	author = {Lam, Ho-Pun and Hashmi, Mustafa},
	month = jan,
	year = {2019},
	note = {Publisher: Cambridge University Press},
	keywords = {business contracts, Deontic logic, legal reasoning, LegalRuleML, modal defeasible logic},
	pages = {1--26},
	file = {Snapshot:/Users/mengwong/Zotero/storage/JGKV67RK/B595A9381624C7D96B4A27D579966D5E.html:text/html;Submitted Version:/Users/mengwong/Zotero/storage/79UWI69N/Lam and Hashmi - 2019 - Enabling reasoning with LegalRuleML.pdf:application/pdf}
}

@inproceedings{governatori_variants_2007,
	address = {New York, NY, USA},
	series = {{ICAIL} '07},
	title = {Variants of temporal defeasible logics for modelling norm modifications},
	isbn = {978-1-59593-680-6},
	url = {https://doi.org/10.1145/1276318.1276347},
	doi = {10.1145/1276318.1276347},
	abstract = {This paper proposes some variants of Temporal Defeasible Logic (TDL) to reason about normative modifications. These variants make it possible to differentiate cases in which, for example, modifications at some time change legal rules but their conclusions persist afterwards from cases where also their conclusions are blocked.},
	urldate = {2020-09-20},
	booktitle = {Proceedings of the 11th international conference on {Artificial} intelligence and law},
	publisher = {Association for Computing Machinery},
	author = {Governatori, Guido and Rotolo, Antonino and Riveret, Régis and Palmirani, Monica and Sartor, Giovanni},
	month = jun,
	year = {2007},
	pages = {155--159},
	file = {Full Text:/Users/mengwong/Zotero/storage/HXP2LU3D/Governatori et al. - 2007 - Variants of temporal defeasible logics for modelli.pdf:application/pdf}
}

@misc{pyle_docassemble_nodate,
	title = {Docassemble},
	url = {http://docassemble.org/},
	abstract = {A free, open-source expert system for guided interviews and document assembly, based on Python, YAML, and Markdown.},
	language = {en},
	urldate = {2020-09-20},
	journal = {Docassemble},
	author = {Pyle, Jonathan},
	file = {Snapshot:/Users/mengwong/Zotero/storage/BUN5VAST/docassemble.org.html:text/html}
}

@misc{noauthor_notitle_nodate,
	url = {https://lawreview.law.ucdavis.edu/issues/46/2/},
	urldate = {2020-09-21},
	file = {:/Users/mengwong/Zotero/storage/8AVJ3MZP/2.html:text/html}
}

@article{surden_computable_2012,
	title = {Computable {Contracts}},
	volume = {46},
	url = {https://scholar.law.colorado.edu/articles/148},
	journal = {U.C. Davis Law Review},
	author = {Surden, Harry},
	month = jan,
	year = {2012},
	pages = {629--700}
}
